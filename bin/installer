#!/bin/bash

#/ NAME
#/     build-installer-ubuntu -- generate automated iso from unpackaged ubuntu media
#/
#/ SYNOPSIS
#/     build-installer-ubuntu [definition]

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/libexec/_prime" "$@"
require 'profile'
require 'bundler'

# entry point
function main {
  local nm_base=$1; shift

  local nm_build=$(basename $(ryaml $shome/definitions/$nm_base/config/definition.yml iso_file) .iso)
  nm_build="${nm_build/-unattended}"

  mkdir -p $shome/mnt/$nm_build.src/{preseed,isolinux}
  chmod u+w $shome/mnt/$nm_build.src/{preseed,isolinux}
  chmod u+w $shome/mnt/$nm_build.src/isolinux/isolinux.bin

  rsync -ia $shome/definitions/$nm_base/share/preseed.cfg $shome/mnt/$nm_build.src/preseed/
  rsync -ia $shome/definitions/$nm_base/share/isolinux.cfg $shome/mnt/$nm_build.src/isolinux/

  pushd $shome/mnt/$nm_build.src
  mkisofs \
    -r -V "$nm_build" \
    -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat \
    -no-emul-boot -boot-load-size 4 -boot-info-table -o "$shome/vault/virtualbox/iso/$nm_build-unattended.iso" .
  popd
}

# define command line options:
#   var name, default, description, short option

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

if [[ "$#" < 1 ]]; then
  logger_fatal "missing veewee definition"
  exit 1
fi

# pass arguments to entry point
main "$@"
