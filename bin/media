#!/bin/bash

#/ NAME
#/     build-media-ubuntu -- download and unpack ubuntu iso
#/
#/ SYNOPSIS
#/     build-media-ubuntu [definition]

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/libexec/_prime" "$@"
require 'profile'
require 'bundler'

# entry point
function main {
  local nm_base=$1; shift

  local nm_build=$(basename $(ryaml $shome/definitions/$nm_base/config/definition.yml iso_file) .iso)
  nm_build="${nm_build/-unattended}"

  if [[ ! -f "$shome/iso/$nm_build.iso" ]]; then
    local url_build=$(ryaml $shome/definitions/$nm_base/config/definition.yml iso_src)
    wget -nv -c "$url_build" -O "$shome/iso/$nm_build.iso" || true # 404 does not return error code
  fi

  if [[ -f "$shome/iso/$nm_build.tar.gz" ]]; then
    sudo rm -rf "$shome/mnt/$nm_build.mnt"
    (cd $shome/mnt && tar xvfz "$shome/iso/$nm_build.tar.gz")
  else
    hdiutil mount -mountpoint "$shome/mnt/$nm_build.mnt" $shome/iso/$nm_build.iso
  fi

  sudo rm -rf $shome/mnt/$nm_build.src
  sudo rsync -ia $shome/mnt/$nm_build.mnt/. $shome/mnt/$nm_build.src/
  sudo chown -R $(id -un):$(id -gn) $shome/mnt/$nm_build.src

  if [[ ! -f "$shome/iso/$nm_build.tar.gz" ]]; then
    hdiutil unmount "$shome/mnt/$nm_build.mnt"
  fi
}

# define command line options:
#   var name, default, description, short option

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

if [[ "$#" < 1 ]]; then
  logger_fatal "missing veewee definition"
  exit 1
fi

# pass arguments to entry point
main "$@"
