#!/bin/bash

#/ NAME
#/     instance -- creates a vagrant from a veewee basebox
#/
#/ SYNOPSIS
#/     instance [basebox] [instance]

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/libexec/_prime" "$@"
require 'profile'
require 'bundler'

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing basebox"
    exit 1
  fi

  if [[ "$#" < 2 ]]; then
    logger_fatal "missing instance"
    exit 1
  fi

  local FLAGS_basebox=$1; shift
  local nm_instance=$1; shift

  # check if the instance is already configured
  if [[ -f "$UBUNTU/vagrant/$nm_instance/.vagrant" ]]; then
    if [[ "$FLAGS_destroy" = "$FLAGS_TRUE" ]]; then
      $shome/bin/vagrant -- "$nm_instance" destroy -f || true
      rm -rf $UBUNTU/vagrant/$nm_instance
    fi
  fi

  if ! bundle exec vagrant box list | egrep "^$FLAGS_basebox"'$'; then
    bundle exec vagrant box add $FLAGS_basebox $shome/vault/virtualbox/boxes/$FLAGS_basebox.box
  fi

  # configure vagrant.yml
  mkdir -p "$UBUNTU/vagrant"
  cat > "$UBUNTU/vagrant/$nm_instance.yml" <<EOF
---
box: $FLAGS_basebox
provision: libexec/provision.sh
network: $FLAGS_ip
bridge: $FLAGS_bridge
gui: $FLAGS_gui
EOF

  pushd $shome/definitions/$FLAGS_definition > /dev/null
  (export _AO_WORKAREA="$UBUNTU/vagrant/$nm_instance"; bin/deploy localhost)
  popd > /dev/null
}

# define command line options:
#   var name, default, description, short option
DEFINE_string 'ip' '' 'internal ip address at eth1'
DEFINE_boolean 'bridge' "$FLAGS_FALSE" 'bridged interface at eth2'
DEFINE_boolean 'destroy' "$FLAGS_FALSE" 'destroy the instance if it exists'
DEFINE_string 'definition' "" 'Veewee/Vagrant definition' 
DEFINE_boolean 'gui' "$FLAGS_FALSE" 'Run with VirtualBox GUI'

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
