#!/bin/bash

#/ NAME
#/     setup-instance -- creates a vagrant from a veewee basebox
#/
#/ SYNOPSIS
#/     setup-instance [basebox] [vagrant]

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"
require 'profile'
require 'bundler'

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing vagrant"
    exit 1
  fi

  if [[ "$#" < 2 ]]; then
    logger_fatal "missing veewee definition"
    exit 1
  fi

  local nm_basebox=$1; shift
  local nm_vagrant=$1; shift

  bundle_macports

  # check if the instance is already configured
  if [[ -f "$shome/vagrant/$nm_vagrant/.vagrant" ]]; then
    if [[ "$FLAGS_delete" = "$FLAGS_FALSE" ]]; then
      if [[ "$FLAGS_reconfig" = "$FLAGS_FALSE" ]]; then
        logger_fatal "$nm_vagrant already exists, not recreating"
        exit 1
      fi
    else
      $shome/bin/vagrant -- "$nm_vagrant" destroy -f 
    fi
  fi

  # copy vagrant templates
  local vagrant_source
  if [[ -d $shome/definitions/$nm_basebox/vagrant ]]; then
    vagrant_source="$shome/definitions/$nm_basebox/vagrant/."
  elif [[ -f $shome/definitions/$nm_basebox/Vagrantfile ]]; then
    vagrant_source="$shome/definitions/$nm_basebox/."
  else
    vagrant_source="$shome/definitions/$nm_vagrant/."
  fi
  mkdir -p "$shome/vagrant"
  rsync --delete -ia --exclude .vagrant "$vagrant_source"  "$shome/vagrant/$nm_vagrant/"

  # configure Vagrantfile
  tmp_vagrantfile="$(mktemp -t XXXXXXXXX)"
  {
    head -2 "$shome/vagrant/$nm_vagrant/Vagrantfile"

    # configure network
    if [[ -n "$FLAGS_ip" ]]; then
      echo "config.vm.network :hostonly, '$FLAGS_ip'"
    fi
    # configure vagrant box
    echo "config.vm.box = '$nm_basebox'"

    tail -n +3 "$shome/vagrant/$nm_vagrant/Vagrantfile" 
  } > "$tmp_vagrantfile"
  cp "$tmp_vagrantfile" "$shome/vagrant/$nm_vagrant/Vagrantfile"
  rm -f "$tmp_vagrantfile"

  if ! bundle exec vagrant box list | egrep "^$nm_basebox"'$'; then
    bundle exec vagrant box add $nm_basebox boxes/$nm_basebox.box
  fi
  $shome/bin/vagrant $nm_vagrant up || true # errors out on the /vagrant mount

  ver_virtualbox=$(VBoxManage --version | perl -pe 's{[^\.\d].*$}{}')
  echo "$ver_virtualbox" | $shome/bin/vagrant -- ssh $nm_vagrant tee .vbox_version

  $shome/bin/vagrant rsync $nm_vagrant -- "$shome/vagrant/$nm_vagrant/vagrant.sh" $nm_vagrant:
  $shome/bin/vagrant ssh $nm_vagrant -- bash vagrant.sh
  
  if [[ "$FLAGS_reconfig" = "$FLAGS_TRUE" ]]; then
    $shome/bin/vagrant $nm_vagrant reload
  fi
}

# define command line options:
#   var name, default, description, short option
DEFINE_string 'ip' '' 'ip addresses'
DEFINE_boolean 'delete' "$FLAGS_FALSE" 'delete the instance if it exists'
DEFINE_boolean 'reconfig' "$FLAGS_FALSE" 'reconfigure the instance'

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
