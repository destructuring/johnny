#!/bin/bash

#/ NAME
#/     instance -- creates a vagrant from a veewee basebox
#/
#/ SYNOPSIS
#/     instance [basebox] [instance]

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"
require 'profile'
require 'bundler'

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing basebox"
    exit 1
  fi

  if [[ "$#" < 2 ]]; then
    logger_fatal "missing instance"
    exit 1
  fi

  local nm_basebox=$1; shift
  local nm_instance=$1; shift

  bundle_macports

  # check if the instance is already configured
  if [[ -f "$shome/vagrant/$nm_instance/.vagrant" ]]; then
    if [[ "$FLAGS_destroy" = "$FLAGS_FALSE" ]]; then
      if [[ "$FLAGS_reconfig" = "$FLAGS_FALSE" ]]; then
        logger_fatal "$nm_instance already exists, not recreating"
        exit 1
      fi
    else
      $shome/bin/vagrant -- "$nm_instance" destroy -f 
    fi
  fi

  # copy vagrant templates
  local vagrant_source
  if [[ -n "$FLAGS_definition" ]]; then
    if [[ -f $shome/definitions/$FLAGS_definition/Vagrantfile ]]; then
      vagrant_source="$shome/definitions/$FLAGS_definition"
    else
      logger_fatal "cannot find a Vagrantfile for $FLAGS_definition"
      exit 1
    fi
  else
    if [[ -f $shome/definitions/$nm_instance/Vagrantfile ]]; then
      vagrant_source="$shome/definitions/$nm_instance"
    elif [[ -f $shome/definitions/$nm_basebox/Vagrantfile ]]; then
      vagrant_source="$shome/definitions/$nm_basebox"
    else
      logger_fatal "cannot find a Vagrantfile for $nm_basebox or $nm_instance"
      exit 1
    fi
  fi

  mkdir -p "$shome/vagrant"
  rsync --delete -ia --exclude .vagrant "$vagrant_source/."  "$shome/vagrant/$nm_instance/"

  # configure V=vagrant.yml
  cat > "$shome/vagrant/$nm_instance/vagrant.yml" <<EOF
---
box: $nm_basebox
provision: provision.sh
network: $FLAGS_ip
EOF

  if ! bundle exec vagrant box list | egrep "^$nm_basebox"'$'; then
    bundle exec vagrant box add $nm_basebox boxes/$nm_basebox.box
  fi
  $shome/bin/vagrant $nm_instance up || true # errors out on the /vagrant mount

  ver_virtualbox=$(VBoxManage --version | perl -pe 's{[^\.\d].*$}{}')
  echo "$ver_virtualbox" | $shome/bin/vagrant -- ssh $nm_instance tee .vbox_version

  $shome/bin/vagrant rsync $nm_instance -- "$shome/vagrant/$nm_instance/vagrant.sh" $nm_instance:
  $shome/bin/vagrant ssh $nm_instance -- bash vagrant.sh
  
  if [[ "$FLAGS_provision" = "$FLAGS_TRUE" ]]; then
    $shome/bin/vagrant $nm_instance provision
  fi
}

# define command line options:
#   var name, default, description, short option
DEFINE_string 'ip' '' 'ip addresses'
DEFINE_boolean 'destroy' "$FLAGS_FALSE" 'destroy the instance if it exists'
DEFINE_string 'definition' "" 'Veewee/Vagrant definition' 
DEFINE_boolean 'provision' "$FLAGS_TRUE" 'Run the provision scripts' 

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
