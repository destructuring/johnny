#!/bin/bash

#/ NAME
#/     config -- emits configuration for vagrants
#/
#/ SYNOPSIS
#/     config ssh

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/bin/_prime" "$@"
require 'profile'
require 'bundler'

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing component"
    exit 1
  fi

  bundle_macports

  local nm_component=$1; shift
  case "$nm_component" in
    ssh)
      config_ssh "$@"
      ;;
    bash)
      config_bash "$@"
      ;;
    *)
      logger_fatal "dont know how to handle component $nm_component"
      exit 1
      ;;
  esac
}

function config_ssh {
  set +f
  local a
  for a in $shome/vagrant/*; do 
    if [[ ! -d "$a" ]]; then
      continue
    fi

    if [[ ! -f "$a/.vagrant" ]]; then
      continue
    fi

    local nm_vagrant="$(basename "$a")"
    local ip_vagrant="$(ryaml "$a/vagrant.yml" network)"
cat <<EOF

Host $nm_vagrant
  HostKeyAlias $nm_vagrant.vagrant
  Hostname $ip_vagrant
  UserKnownHostsFile $shome/vagrant/$nm_vagrant/.ssh_known_hosts
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile $HOME/.vagrant.d/insecure_private_key
  IdentitiesOnly yes
  User root
EOF
  done
  set -f
}

function config_bash {
  local dollar='$'

  set +f
  local a
  for a in $shome/vagrant/*; do 
    if [[ ! -d "$a" ]]; then
      continue
    fi

    if [[ ! -f "$a/.vagrant" ]]; then
      continue
    fi

    local nm_vagrant="$(basename "$a")"
    local ip_vagrant="$(ryaml "$a/vagrant.yml" network)"

cat <<EOF
function $nm_vagrant {
  $shome/bin/vagrant -- $nm_vagrant "${dollar}@"
}
EOF
  done
  set -f
}

# define command line options:
#   var name, default, description, short option

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
