#!/bin/bash

#/ NAME
#/     vagrant -- wrapper around vagrant gem
#/
#/ SYNOPSIS
#/     vagrant ssh [vagrant] [remote command]
#/     vagrant (scp|rsync) [vagrant] [source] [destination]
#/     vagrant [vagrant] [vagrant command]

# figure out the project root under which bin, lib live
shome="$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)"

# load a meat library
source "$shome/libexec/_prime" "$@"
require 'profile'
require 'bundler'

# entry point
function main {
  if [[ "$#" < 1 ]]; then
    logger_fatal "missing command or vagrant"
    exit 1
  fi

  case "$1" in
    ssh|scp|rsync)
      if [[ "$#" < 2 ]]; then
        logger_fatal "missing vagrant"
        exit 1
      fi

      nm_cmd="$1"; shift
      nm_instance="$1"; shift
    ;;
    *)
      nm_instance="$1"; shift
      if [[ "$#" > 0 ]]; then
        case "$1" in
          ssh|scp|rsync)
            nm_cmd="$1"; shift
          ;;
          *)
            nm_cmd="vagrant"
          ;;
        esac
      else
        nm_cmd="vagrant"
      fi
    ;;
  esac

  pushd $UBUNTU/vagrant/$nm_instance > /dev/null
  bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }

  pth_config="$UBUNTU/vagrant/$nm_instance/.ssh_config"

  if [[ .vagrant -nt $pth_config ]]; then
    {
      bundle exec vagrant ssh-config | egrep -v '/dev/null' | perl -pe "s{Host default}{Host $nm_instance}"
      echo "  UserKnownHostsFile=$(pwd)/.ssh_known_hosts"
    } > $pth_config
  fi

  if [[ .vagrant -nt .ssh_known_hosts ]]; then
    port=$(awk '$1 == "Port" { print $2 }' $pth_config)
    hostname=$(awk '$1 == "HostName" { print $2 }' $pth_config)
    ssh-keyscan -p $port $hostname,$nm_instance,"[$hostname]:$port" 2>&- > .ssh_known_hosts
  fi
  popd > /dev/null

  case "$nm_cmd" in
    ssh)   ssh -F $pth_config   $nm_instance "$@" ;;
    scp)   scp -F $pth_config                "$@" ;;
    rsync) rsync -ia -e "ssh -F $pth_config" "$@" ;;

    vagrant)     
      pushd $UBUNTU/vagrant/$nm_instance > /dev/null
      if [[ "$#" < 1 ]]; then
        set -- 'ssh'
      fi
      bundle check 2>&1 >/dev/null || { bundle install --quiet --local --path vendor/bundle || bundle check > /dev/null; }
      bundle exec vagrant "$@" 
      popd > /dev/null
    ;;
  esac
}

# define command line options:
#   var name, default, description, short option

# parse the command-line
parse_command_line "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# pass arguments to entry point
main "$@"
